#include<stdio.h>
#include<stdlib.h>
typedef struct {
    int *array;
    int length;
}List;  //首先先定义顺序表结构

int isExist(List src, int tmp)
{
    int i = 0;
    while (i < src.length)
    {
        if (src.array[i] == tmp)
            break;
        i++;
    }
    if (i == src.length)
        return 0;    
    return 1;  
}//程序从顺序表src中取得其array[i]并和tmp比较，如果tmp存在此顺序表中，那么返回0，否则返回1.


List unionList(List src1, List src2)
{
    List des;
    int i;
    des.array = (int *)malloc(sizeof(int)*(src1.length + src2.length));//malloc可以动态分配内存，在这里是将des表中的array先分配内存赋上值。
    des.length = 0;
    for (i = 0;i < src1.length;++i) 
    {
        if (!isExist(des, src1.array[i]))//如果isExist函数返回0，则执行下列语句
        {
            des.array[des.length] = src1.array[i];
            des.length++;
        }
    }
    for (i = 0;i < src2.length;++i) 
    {
        if (!isExist(des, src2.array[i]))
        {
            des.array[des.length] = src2.array[i];
            des.length++;
        }
    }
    return des;
}//此函数运用了两次遍历，第一次遍历将A顺序表中的数字全部放到des表中，第二次遍历将B顺序表中的数字进行一个判断，如果某数字存在于des中，则不插入这个数字，如果某数字不存在于des中，则插入这个数字到des中。


List sectionList(List src1, List src2)
{
    List des;
    int i;
    int len = src1.length < src2.length ? src1.length : src2.length;  
   
    des.array = (int *)malloc(sizeof(int)*(len));
    des.length = 0;
    for (i = 0;i < src2.length;i++) 
    {
        if (isExist(src1, src2.array[i]) && !isExist(des, src2.array[i]))  
        {
            des.array[des.length] = src2.array[i];    
            des.length++;
        }
    }
    return des;
}//此函数的意思是先判断A和B顺序表哪一个更短一些，然后将更短一些的顺序表的长度赋给len，因为两个集合的交集中的元素一定小于等于两个集合中元素更少的那个集合的元素总数。然后用一个遍历，找寻A于B中相同的元素并将其赋给des顺序表。即可得到并集。

int main()
{
    
    List A,B;
    int i,t,j;  
    int a[7],b[7];
    printf("请输入7个数，放到a集合中: \n");
    for(int i1=0;i1<7;i1++)
  		scanf("%d",&a[i1]);
  	printf("请输入7个数，放到b集合中: \n");
    for(int i2=0;i2<7;i2++)
  		scanf("%d",&b[i2]);
    
    A.array = a;
    A.length = 7;
    B.array = b;
    B.length = 7;
    List x = unionList(A, B);
    List y = sectionList(A, B);
    printf("A,B 并集：\n");
    for (i = 0;i < x.length;i++)
 			{for( j=0;j<x.length-i;j++)
    			if(x.array[j]>x.array[j+1])
  					{t=x.array[j];x.array[j]=x.array[j+1];x.array[j+1]=t;}}//冒泡排序
    for(j=0;j< x.length;j++)
    {printf("%d\t", x.array[j]);
	}  
    printf("\n\n\nA,B交集：\n");
    for (i = 0;i < y.length;i++)
        printf("%d\t", y.array[i]);
    printf("\n");

    system("pause");
    return 0;
}
